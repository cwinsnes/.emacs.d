* Instructions
This org file dshould be loaded as part of initialization for Emacs 26+.
Use org-babel-load-file to load the file.

Essentially, the file should be loaded from your init.el using
#+BEGIN_EXAMPLE
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(package-initialize)

(package-installed-p 'use-package)
(package-refresh-contents)
(package-install 'use-package)

(org-babel-load-file (expand-file-name "~/.emacs.d/emacsinit.org"))
#+END_EXAMPLE

* Init
** use-package configuration
We are going to be using use-package as a package manager and
package configuration system. This has to be done first in the
file!
#+BEGIN_SRC emacs-lisp
(eval-when-compile
(require 'use-package)
(setq use-package-always-ensure t))
#+END_SRC

** Unset and hide items
#+BEGIN_SRC emacs-lisp
(dotimes (n 10)
  (global-unset-key (kbd (format "C-%d" n)))
  (global-unset-key (kbd (format "M-%d" n)))
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package diminish)
#+END_SRC

** evil-mode - Vim key bindings
Use Vim key bindings by default. Do note that some of the other
packages might set evil mode keys to their commands.

#+BEGIN_SRC emacs-lisp

(use-package evil
:diminish evil-mode
:diminish undo-tree-mode
:init
(setq evil-want-C-u-scroll t)
(setq evil-search-module 'evil-search)
(setq evil-want-keybinding nil)

(use-package evil-org
:after evil)

(use-package evil-collection
:after evil
:config
(evil-collection-init))

(use-package evil-magit
:after evil)

;; Evil leader has to be loaded before Evil to work in initial buffers.
(use-package evil-leader)

(define-key evil-normal-state-map (kbd "C-f") 'find-file))
(evil-leader/set-leader "<SPC>")
(evil-leader/set-key
    "w" 'save-buffer
    "f" 'find-file
    "g" 'magit-status
    "b" 'evil-switch-to-windows-last-buffer)

(with-eval-after-load 'evil-maps
  (define-key evil-normal-state-map (kbd "C-n") nil)
  (define-key evil-normal-state-map (kbd "C-p") nil))

(global-evil-leader-mode)
(evil-mode 1)
#+END_SRC

** Ivy - completion front-end
Use Ivy as the deafult completion engine for finding files and such.
#+BEGIN_SRC emacs-lisp
(use-package ivy
:diminish ivy-mode
:config
(ivy-mode 1)
(define-key ivy-minibuffer-map [escape] 'minibuffer-keyboard-quit)
)
#+END_SRC

Use counsel and ivy rich to make for nicer interface to Ivy. Ivy-rich
in particular gives a short preview of each command in the Ivy-list.
#+BEGIN_SRC emacs-lisp
(use-package counsel
:diminish counsel-mode
:after ivy
:config
(counsel-mode 1))

(use-package ivy-rich
  :after ivy
  :init
  (setq ivy-rich-display-transformers-list ; max column width sum = (ivy-poframe-width - 1)
        '(ivy-switch-buffer
          (:columns
           ((ivy-rich-candidate (:width 35))
            (ivy-rich-switch-buffer-project (:width 15 :face success))
            (ivy-rich-switch-buffer-major-mode (:width 13 :face warning)))
           :predicate
           #'(lambda (cand) (get-buffer cand)))
          counsel-M-x
          (:columns
           ((counsel-M-x-transformer (:width 35))
            (ivy-rich-counsel-function-docstring (:width 34 :face font-lock-doc-face))))
          counsel-describe-function
          (:columns
           ((counsel-describe-function-transformer (:width 35))
            (ivy-rich-counsel-function-docstring (:width 34 :face font-lock-doc-face))))
          counsel-describe-variable
          (:columns
           ((counsel-describe-variable-transformer (:width 35))
            (ivy-rich-counsel-variable-docstring (:width 34 :face font-lock-doc-face))))
          package-install
          (:columns
           ((ivy-rich-candidate (:width 25))
            (ivy-rich-package-version (:width 12 :face font-lock-comment-face))
            (ivy-rich-package-archive-summary (:width 7 :face font-lock-builtin-face))
            (ivy-rich-package-install-summary (:width 23 :face font-lock-doc-face))))))
  :config
  (ivy-rich-mode +1)
  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))
#+END_SRC

Use Ivy-posframe to make sure that the ivy interface shows up in a top
center popup instead of the default bottom location.
This package requires Emacs to be at least version 26.
#+BEGIN_SRC emacs-lisp
(use-package ivy-posframe
:diminish ivy-posframe-mode
:after ivy
:config
(setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center)))
(ivy-posframe-mode 1))
#+END_SRC

With Ivy comes Swiper, a much nicer search system than the default.
#+BEGIN_SRC emacs-lisp
(use-package swiper
:init
(setq ivy-display-style 'fancy)
:config
(define-key evil-normal-state-map "/" 'swiper-isearch))
#+END_SRC

** Project management
*** Magit - Git interface
   #+BEGIN_SRC emacs-lisp
   (use-package magit)
   #+END_SRC
*** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
:diminish projectile-mode
:config
(projectile-mode 1)
(define-key evil-normal-state-map (kbd "C-p") 'projectile-command-map))
#+END_SRC

*** E-TAGS!
This project requires counsel to be installed.
#+BEGIN_SRC emacs-lisp
(use-package counsel-etags
  :bind (("C-]" . counsel-etags-find-tag-at-point))
  :init
  (setq tags-revert-without-query t)
  (setq tags-add-tables nil)
  (setq large-file-warning-threshold nil)
  (add-hook 'prog-mode-hook
    (lambda ()
        (add-hook 'after-save-hook
                  'counsel-etags-virtual-update-tags 'append 'local)))
  :config
  (define-key evil-normal-state-map (kbd "C-]") 'counsel-etags-find-tag-at-point)
  (setq counsel-etags-update-interval 60)
  (push "build" counsel-etags-ignore-directories))
  #+END_SRC
** GUI configuration
*** Window management
Removing unneccessary clutter from the GUI.
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
#+END_SRC

Install an icons pack
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
#+END_SRC

Set up a start screen
#+BEGIN_SRC emacs-lisp
(use-package page-break-lines
:diminish page-break-lines-mode)
(use-package dashboard
:diminish dashboard-mode
:init
(setq dashboard-set-heading-icons t)
(setq dashboard-footer "Emacs is pretty cool")
(setq dashboard-set-file-icons t)
(setq dashboard-items '((recents . 5)
                        (projects . 5)
                        (bookmarks . 5)))
:config
(dashboard-setup-startup-hook))
#+END_SRC

Work with multiple windows.
#+BEGIN_SRC emacs-lisp
(use-package eyebrowse
:diminish eyebrowse-mode
:config (progn
(define-key evil-normal-state-map (kbd "M-0") 'eyebrowse-switch-to-window-config-0)
(define-key evil-normal-state-map (kbd "M-1") 'eyebrowse-switch-to-window-config-1)
(define-key evil-normal-state-map (kbd "M-2") 'eyebrowse-switch-to-window-config-2)
(define-key evil-normal-state-map (kbd "M-3") 'eyebrowse-switch-to-window-config-3)
(define-key evil-normal-state-map (kbd "M-4") 'eyebrowse-switch-to-window-config-4)
(define-key evil-normal-state-map (kbd "M-5") 'eyebrowse-switch-to-window-config-5)
(define-key evil-normal-state-map (kbd "M-6") 'eyebrowse-switch-to-window-config-6)
(define-key evil-normal-state-map (kbd "M-7") 'eyebrowse-switch-to-window-config-7)
(define-key evil-normal-state-map (kbd "M-8") 'eyebrowse-switch-to-window-config-8)
(define-key evil-normal-state-map (kbd "M-9") 'eyebrowse-switch-to-window-config-9)
(define-key evil-normal-state-map (kbd "M-r") 'eyebrowse-rename-window-config)
(define-key evil-normal-state-map (kbd "M-w") 'eyebrowse-close-window-config)
(eyebrowse-mode 1)
(setq eyebrowse-new-workspace t)))
#+END_SRC
*** Text
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono-10"))
#+END_SRC
*** Colorscheme
Defaulting here to doom-one, as inspired by Atom.
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
:no-require t
:config
(load-theme 'doom-one t))
#+END_SRC

Use rainbow parenthesis and such
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
:diminish rainbow-delimiters-mode
:config
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

*** Modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
:hook (after-init . doom-modeline-mode))
#+END_SRC

**** Hiding the modeline
#+BEGIN_SRC emacs-lisp
(use-package hide-mode-line)
#+END_SRC
** File management
Directory management
#+BEGIN_SRC emacs-lisp
(use-package neotree
:init
(setq neo-smart-open t)
(setq neo-theme (if (display-graphic-p) 'icons 'arrow))
:config
    (global-set-key [f8] 'neotree-toggle)
    (add-hook 'neotree-mode-hook
    (lambda ()
        (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
        (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
        (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
        (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
        (evil-define-key 'normal neotree-mode-map (kbd "g") 'neotree-refresh)
        (evil-define-key 'normal neotree-mode-map (kbd "n") 'neotree-next-line)
        (evil-define-key 'normal neotree-mode-map (kbd "p") 'neotree-previous-line)
        (evil-define-key 'normal neotree-mode-map (kbd "A") 'neotree-stretch-toggle)
        (evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle))))
#+END_SRC

*** Autocompleting
#+BEGIN_SRC emacs-lisp
(global-set-key "\M-/" 'comint-dynamic-complete-filename)
#+END_SRC

*** File finding
The FZF package requires there to be a =fzf= executable somewhere in your =$PATH= to work properly.
#+BEGIN_SRC emacs-lisp
(use-package fzf
:config
(define-key evil-normal-state-map (kbd "M-f") 'fzf))
#+END_SRC
*** PDF modes
#+BEGIN_SRC emacs-lisp
(add-hook 'doc-view-mode-hook 'auto-revert-mode)
#+END_SRC
** Programming languages
*** Python
#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "ipython3"
      python-shell-interpreter-args "-i --simple-prompt")
(use-package elpy
:init
(setq elpy-shell-starting-directory 'current-directory)
(elpy-enable))
#+END_SRC
*** C
#+BEGIN_SRC emacs-lisp
(defun infer-indentation-style ()
  ;; if our source file uses tabs, we use tabs, if spaces spaces, and if
  ;; neither, we use the current indent-tabs-mode
  (let ((space-count (how-many "^  " (point-min) (point-max)))
        (tab-count (how-many "^\t" (point-min) (point-max))))
    (if (> space-count tab-count) (setq indent-tabs-mode nil))
    (if (> tab-count space-count) (setq indent-tabs-mode t))))


(setq c-default-style "linux"
          c-basic-offset 2)
(add-hook 'c-mode-hook (lambda ()
    (setq indent-tabs-mode nil)
    (infer-indentation-style)))
#+END_SRC
** Org mode!
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented 1)
(add-hook 'org-mode-hook #'visual-line-mode)

;; Allow for :no_title: to be used to ignore a heading in TOC
(defun org-remove-headlines (backend)
  "Remove headlines with :no_title: tag."
  (org-map-entries (lambda () (delete-region (point-at-bol) (point-at-eol)))
                   "no_title"))

(add-hook 'org-export-before-processing-hook #'org-remove-headlines)
#+END_SRC

*** Citations
This allows us to use easy referencing from within Org.
Note that we are also using ivy-bibtex, for completions and such.
#+BEGIN_SRC emacs-lisp
(use-package org-ref
:init
(setq org-ref-completion-library 'org-ref-ivy-cite)
(setq reftex-default-bibliography '("~/references/references.bib"))
(setq org-ref-bibliography-notes "~/references/notes.org"
      org-ref-default-bibliography '("~/references/references.bib")
      org-ref-pdf-directory "~/references/pdfs/"))
(setq bibtex-completion-bibliography "~/references/references.bib"
      bibtex-completion-library-path "~/references/pdfs"
      bibtex-completion-notes-path "~/references/notes")

(setq  org-latex-pdf-process
       '("latexmk -shell-escape -bibtex -pdf %f"))
#+END_SRC


*** Presentations
#+BEGIN_SRC emacs-lisp
(use-package visual-fill-column)
(use-package writeroom-mode)

(use-package org-present)

(progn
     (add-hook 'org-present-mode-hook
               (lambda ()
                 (writeroom-mode)
                 (org-present-big)
                 (org-display-inline-images)
                 (org-present-hide-cursor)
                 (org-present-read-only))
                 (evil-force-normal-state))
     (add-hook 'org-present-mode-quit-hook
               (lambda ()
                 (org-present-small)
                 (org-remove-inline-images)
                 (org-present-show-cursor)
                 (org-present-read-write)
                 (writeroom-mode -1))))

(evil-ex-define-cmd "present" 'org-present)
(evil-define-key 'normal org-mode-map (kbd "C-c C-p") 'org-present)
(evil-define-key 'normal org-present-mode-keymap [right] 'org-present-next)
(evil-define-key 'normal org-present-mode-keymap [left] 'org-present-prev)
(evil-define-key 'normal org-present-mode-keymap (kbd "w") 'writeroom-mode)
(evil-define-key 'normal org-present-mode-keymap (kbd "C-n") 'org-present-next)
(evil-define-key 'normal org-present-mode-keymap (kbd "C-p") 'org-present-prev)
(evil-define-key 'normal org-present-mode-keymap (kbd "C-c <") 'org-present-beginning)
(evil-define-key 'normal org-present-mode-keymap (kbd "C-c >") 'org-present-end)
(evil-define-key 'normal org-present-mode-keymap (kbd "C-c C-q") 'org-present-quit)
(evil-define-key 'normal org-present-mode-keymap (kbd "C-+") 'org-present-big)
(evil-define-key 'normal org-present-mode-keymap (kbd "C--") 'org-present-small)
#+END_SRC
** General emacs configuration
#+BEGIN_SRC emacs-lisp
;; Allow for using just y or n instead of writing yes/no.
(fset 'yes-or-no-p 'y-or-n-p)
;; Disable that annoying bell
(setq ring-bell-function 'ignore)
;; Show the time
(display-time-mode 1)
(blink-cursor-mode -1)
#+END_SRC

Remove trailing whitespace upon save
#+BEGIN_SRC emacs-lisp
(use-package whitespace
:ensure nil
:hook (before-save . whitespace-cleanup))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package emacs
:diminish auto-revert-mode)
#+END_SRC
