* Instructions
This org file dshould be loaded as part of initialization for Emacs 26+.
Use org-babel-load-file to load the file.

Essentially, the file should be loaded from your init.el using
#+BEGIN_EXAMPLE
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(package-initialize)

(package-installed-p 'use-package)
(package-refresh-contents)
(package-install 'use-package)

(org-babel-load-file (expand-file-name "~/.emacs.d/emacsinit.org"))
#+END_EXAMPLE

* Init
** use-package configuration
We are going to be using use-package as a package manager and
package configuration system. This has to be done first in the
file!
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'use-package)
    (setq use-package-always-ensure t))
#+END_SRC

Add ability to diminish minor modes from list.
Needs to be done here because it is used by use-package in configurations.
#+BEGIN_SRC emacs-lisp
  (use-package diminish)
#+END_SRC

** General emacs settings and plugins
*** Basic settings
#+BEGIN_SRC emacs-lisp
  ;; Allow for using just y or n instead of writing yes/no.
  (fset 'yes-or-no-p 'y-or-n-p)
  ;; Disable that annoying bell
  (setq ring-bell-function 'ignore)
  ;; Show the time
  (display-time-mode 1)
  (blink-cursor-mode -1)
  ;; Enable emacs server
  (server-start)
#+END_SRC

Remove trailing whitespace upon save
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :ensure nil
    :hook (before-save . whitespace-cleanup))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :ensure nil
    :config
    (global-auto-revert-mode)
    (diminish 'auto-revert-mode))
#+END_SRC
** evil-mode - Vim key bindings
Use Vim key bindings by default. Do note that some of the other
packages might set evil mode keys to their commands.

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :diminish evil-mode
    :diminish undo-tree-mode
    :init
    (setq evil-want-C-u-scroll t)
    (setq evil-search-module 'evil-search)
    (setq evil-want-keybinding nil))

  (use-package evil-org
    :after evil)

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-magit
    :after evil)
#+END_SRC

Add a leader key to evil, and set its bindings.
#+BEGIN_SRC emacs-lisp
  ;; Evil leader has to be loaded before Evil to work in initial buffers.
  (use-package evil-leader)

  (define-key evil-normal-state-map (kbd "C-f") 'find-file)
  (evil-leader/set-leader "<SPC>")
  (evil-leader/set-key
    "w" 'save-buffer
    "f" 'find-file
    "g" 'magit-status
    "a" 'ace-jump-mode
    "h" 'evil-ex-nohighlight
    "c" 'calendar
    "l" 'org-journal-new-entry
    "b" 'evil-switch-to-windows-last-buffer)

  (with-eval-after-load 'evil-maps
    (define-key evil-normal-state-map (kbd "C-n") nil)
    (define-key evil-normal-state-map (kbd "C-p") nil))

  (global-evil-leader-mode)
  (evil-mode 1)
#+END_SRC

** File management
*** Neotree
Add a file browser system to emacs.
While it may not be used much it can be very handy sometimes.
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :config
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    (define-key evil-normal-state-map [f8] 'neotree-toggle)
    (global-set-key [f8] 'neotree-toggle))
#+END_SRC
*** Magit
[[https://magit.vc/][Magit]], the better interface to git.
#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC
** File types and languages
*** Org-mode
Make sure that org mode starts in indent mode by default.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure nil
    :config
    (add-hook 'org-mode-hook 'org-indent-mode)
    (eval-after-load 'org-indent '(diminish 'org-indent-mode)))
#+END_SRC
** General coding plugins
*** Company mode
Completion engine for several languages
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :config
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

Add python to supported company languages
#+BEGIN_SRC emacs-lisp
  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))

  (use-package company-jedi
    :config
    (add-hook 'python-mode-hook 'my/python-mode-hook))
#+END_SRC
** Graphical configuration
Make sure all-the-icons is installed.
If the fonts are not already installed, install that as well.
#+BEGIN_SRC emacs-lisp
  (defun aorst/font-installed-p (font-name)
    "Check if font with FONT-NAME is available."
    (if (find-font (font-spec :name font-name))
        t
      nil))

  (use-package all-the-icons
    :config
    (when (and (not (aorst/font-installed-p "all-the-icons"))
               (window-system))
      (all-the-icons-install-fonts t)))
#+END_SRC

Use Doom emacs themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (load-theme 'doom-city-lights t)

    (doom-themes-neotree-config)

    (doom-themes-org-config))
#+END_SRC
