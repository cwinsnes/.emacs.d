* Instructions
This org file should be loaded as part of initialization for Emacs 26+.
Use org-babel-load-file to load the file.

Essentially, the file should be loaded from your init.el using
#+BEGIN_EXAMPLE
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(package-initialize)

(package-installed-p 'use-package)
(package-refresh-contents)
(package-install 'use-package))

(org-babel-load-file (expand-file-name "~/.emacs.d/emacsinit.org"))
#+END_EXAMPLE

* Init
** use-package configuration
We are going to be using use-package as a package manager and
package configuration system. This has to be done first in the
file!
#+BEGIN_SRC emacs-lisp
(eval-when-compile
(require 'use-package)
(setq use-package-always-ensure t))
#+END_SRC

** Unset and hide items
#+BEGIN_SRC emacs-lisp
(dotimes (n 10)
  (global-unset-key (kbd (format "C-%d" n)))
  (global-unset-key (kbd (format "M-%d" n)))
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package diminish)
#+END_SRC

** evil-mode - Vim key bindings
Use Vim key bindings by default. Do note that some of the other
packages might set evil mode keys to their commands.

#+BEGIN_SRC emacs-lisp
(use-package evil
:diminish evil-mode
:diminish undo-tree-mode
:init
(setq evil-want-C-u-scroll t)
(setq evil-search-module 'evil-search)
:config
(evil-mode 1)
(define-key evil-normal-state-map (kbd "C-f") 'find-file))

(use-package evil-org
:after evil)

(use-package evil-magit
:after evil)
#+END_SRC

** Ivy - completion front-end
Use Ivy as the deafult completion engine for finding files and such.
#+BEGIN_SRC emacs-lisp
(use-package ivy
:diminish ivy-mode
:config
(ivy-mode 1)
(define-key ivy-minibuffer-map [escape] 'minibuffer-keyboard-quit)
)
#+END_SRC

Use counsel and ivy rich to make for nicer interface to Ivy. Ivy-rich
in particular gives a short preview of each command in the Ivy-list.
#+BEGIN_SRC emacs-lisp
(use-package counsel
:diminish counsel-mode
:after ivy
:config
(counsel-mode 1))

(use-package ivy-rich
  :after ivy
  :init
  (setq ivy-rich-display-transformers-list ; max column width sum = (ivy-poframe-width - 1)
        '(ivy-switch-buffer
          (:columns
           ((ivy-rich-candidate (:width 35))
            (ivy-rich-switch-buffer-project (:width 15 :face success))
            (ivy-rich-switch-buffer-major-mode (:width 13 :face warning)))
           :predicate
           #'(lambda (cand) (get-buffer cand)))
          counsel-M-x
          (:columns
           ((counsel-M-x-transformer (:width 35))
            (ivy-rich-counsel-function-docstring (:width 34 :face font-lock-doc-face))))
          counsel-describe-function
          (:columns
           ((counsel-describe-function-transformer (:width 35))
            (ivy-rich-counsel-function-docstring (:width 34 :face font-lock-doc-face))))
          counsel-describe-variable
          (:columns
           ((counsel-describe-variable-transformer (:width 35))
            (ivy-rich-counsel-variable-docstring (:width 34 :face font-lock-doc-face))))
          package-install
          (:columns
           ((ivy-rich-candidate (:width 25))
            (ivy-rich-package-version (:width 12 :face font-lock-comment-face))
            (ivy-rich-package-archive-summary (:width 7 :face font-lock-builtin-face))
            (ivy-rich-package-install-summary (:width 23 :face font-lock-doc-face))))))
  :config
  (ivy-rich-mode +1)
  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))
#+END_SRC

Use Ivy-posframe to make sure that the ivy interface shows up in a top
center popup instead of the default bottom location.
This package requires Emacs to be at least version 26.
#+BEGIN_SRC emacs-lisp
(use-package ivy-posframe
:diminish ivy-posframe-mode
:after ivy
:config
(setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center)))
(ivy-posframe-mode 1))
#+END_SRC

With Ivy comes Swiper, a much nicer search system than the default.
#+BEGIN_SRC emacs-lisp
(use-package swiper
:init
(setq ivy-display-style 'fancy)
:config
(define-key evil-normal-state-map "/" 'swiper)
)
#+END_SRC
** Project management
*** Magit - Git interface
   #+BEGIN_SRC emacs-lisp
   (use-package magit)
   #+END_SRC
*** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
:diminish projectile-mode
:config
(projectile-mode 1)
(define-key evil-normal-state-map (kbd "C-p") 'projectile-command-map))
#+END_SRC

*** E-TAGS!
#+BEGIN_SRC emacs-lisp
(use-package counsel-etags
  :init
  (add-hook 'prog-mode-hook
  (lambda ()
  (add-hook 'after-save-hook
  'counsel-etags-virtual-update-tags 'append 'local)))
  :config
  (define-key evil-normal-state-map (kbd "C-]") 'counsel-etags-find-tag-at-point)
  (setq counsel-etags-update-interval 60)
  (push "build" counsel-etags-ignore-directories))
  #+END_SRC
** GUI configuration
*** Window management
Removing unneccessary clutter from the GUI.
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
#+END_SRC

Install an icons pack
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
#+END_SRC

Set up a start screen
#+BEGIN_SRC emacs-lisp
(use-package page-break-lines
:diminish page-break-lines-mode)
(use-package dashboard
:diminish dashboard-mode
:init
(setq dashboard-set-heading-icons t)
(setq dashboard-footer "Emacs is pretty cool")
(setq dashboard-set-file-icons t)
(setq dashboard-items '((recents . 5)
                        (projects . 5)
                        (bookmarks . 5)))
:config
(dashboard-setup-startup-hook))
#+END_SRC

Work with multiple windows.
#+BEGIN_SRC emacs-lisp
(use-package eyebrowse
:diminish eyebrowse-mode
:config (progn
(define-key evil-normal-state-map (kbd "M-1") 'eyebrowse-switch-to-window-config-1)
(define-key evil-normal-state-map (kbd "M-2") 'eyebrowse-switch-to-window-config-2)
(define-key evil-normal-state-map (kbd "M-3") 'eyebrowse-switch-to-window-config-3)
(define-key evil-normal-state-map (kbd "M-4") 'eyebrowse-switch-to-window-config-4)
(define-key evil-normal-state-map (kbd "M-r") 'eyebrowse-rename-window-config)
(eyebrowse-mode 1)
(setq eyebrowse-new-workspace t)))
#+END_SRC

*** Colorscheme
Defaulting here to doom-one, as inspired by Atom.
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
:no-require t
:config
(load-theme 'doom-one t))
#+END_SRC

** File management
#+BEGIN_SRC emacs-lisp
(use-package neotree
:init
(setq neo-smart-open t)
(setq neo-theme (if (display-graphic-p) 'icons 'arrow))
:config
    (global-set-key [f8] 'neotree-toggle)
    (add-hook 'neotree-mode-hook
    (lambda ()
        (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
        (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
        (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
        (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
        (evil-define-key 'normal neotree-mode-map (kbd "g") 'neotree-refresh)
        (evil-define-key 'normal neotree-mode-map (kbd "n") 'neotree-next-line)
        (evil-define-key 'normal neotree-mode-map (kbd "p") 'neotree-previous-line)
        (evil-define-key 'normal neotree-mode-map (kbd "A") 'neotree-stretch-toggle)
        (evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle))))
#+END_SRC
** Org mode!
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented 1)
#+END_SRC

** General emacs configuration
#+BEGIN_SRC emacs-lisp
;; Allow for using just y or n instead of writing yes/no.
(fset 'yes-or-no-p 'y-or-n-p)
;; Disable that annoying bell
(setq ring-bell-function 'ignore)
;; Show the time
(display-time-mode 1)
#+END_SRC

Remove trailing whitespace upon save
#+BEGIN_SRC emacs-lisp
(use-package whitespace
:ensure nil
:hook (before-save . whitespace-cleanup))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package emacs
:diminish auto-revert-mode)
#+END_SRC
