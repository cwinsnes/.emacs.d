* Instructions
This org file dshould be loaded as part of initialization for Emacs 26+.
Use org-babel-load-file to load the file.

Essentially, the file should be loaded from your init.el using
#+BEGIN_EXAMPLE
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)

  (org-babel-load-file (expand-file-name "~/.emacs.d/emacsinit.org"))
#+END_EXAMPLE

* Init
** use-package configuration
We are going to be using use-package as a package manager and
package configuration system. This has to be done first in the
file!
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
#+END_SRC

Add ability to diminish minor modes from list.
Needs to be done here because it is used by use-package in configurations.
#+BEGIN_SRC emacs-lisp
  (use-package diminish)
#+END_SRC

** General emacs settings and plugins
*** Basic settings
#+BEGIN_SRC emacs-lisp
  ;; Allow for using just y or n instead of writing yes/no.
  (fset 'yes-or-no-p 'y-or-n-p)
  ;; Disable that annoying bell
  (setq ring-bell-function 'ignore)
  ;; Show the time
  (display-time-mode 1)
  (blink-cursor-mode -1)
  ;; Enable emacs server
  (server-start)

  ;; Enable both line and column number in mode-line.
  (line-number-mode t)
  (column-number-mode t)

  ;; Remove a bunch of visual noise from emacs
  (setq inhibit-startup-screen t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ;; Create backup dir instead of having backupfiles everywhere.
  ;; Not sure how much this actually does.
  (let ((autosavedir "~/.emacs.d/saves/")
        (backup-dir "~/.emacs.d/backups/"))
    (dolist (dir (list autosavedir backup-dir))
      (when (not (file-directory-p dir))
        (make-directory dir t)))
    (setq backup-directory-alist `(("." . ,backup-dir))
          auto-save-file-name-transforms `((".*" ,autosavedir t))
          auto-save-list-file-prefix (concat autosavedir ".saves-")
          tramp-backup-directory-alist `((".*" . ,backup-dir))
          tramp-auto-save-directory autosavedir))

  (setq backup-by-copying t
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)

  ;; Make sure that garbage collection is much higher than default
  ;; Important for LSP-mode
  (setq gc-cons-threshold 100000000)
  ;; For the same reason, change read-output-max
  (setq read-process-output-max (* 1024 1024 5))

  ;; Allow extra_files
  (add-to-list 'load-path "~/.emacs.d/extra_files")
#+END_SRC

Remove trailing whitespace upon save
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :ensure nil
    :hook (before-save . delete-trailing-whitespace))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :ensure nil
    :config

    (global-auto-revert-mode)
    (diminish 'auto-revert-mode))
#+END_SRC
*** Programming settings
Try to use space indententation essentially everywere.
#+begin_src emacs-lisp
(add-hook 'find-file-hook '(lambda ()
  (if (and buffer-file-name
           (string-match "/gnulib\\>" (buffer-file-name))
           (not (string-equal mode-name "Change Log"))
           (not (string-equal mode-name "Makefile")))
      (setq indent-tabs-mode nil))))
#+end_src

*** Helm
Enable better minibuffer completions.

#+begin_src emacs-lisp
  (use-package helm
    :config
    (global-set-key (kbd "M-x") #'helm-M-x)
    (global-set-key (kbd "C-x C-f") #'helm-find-files)
    (setq helm-ff-skip-boring-files 1)
    (helm-mode 1)

    (bind-key (kbd "C-w") 'backward-kill-word helm-map)
    (bind-key "<escape>" 'helm-keyboard-quit helm-map))

  (use-package helm-org)
#+end_src
*** Eye-browse
Add a tab-like configuration instead of having to use multiple frames
for different groups of buffers.
#+begin_src emacs-lisp
  (use-package eyebrowse
  :diminish eyebrowse-mode
  :after evil
  :config
  (setq eyebrowse-new-workspace "*scratch*")
  (eyebrowse-mode t)
  ; Most of these are supposed to happen automatically but evil is not
  ; detected for some reason.
  (let ((map eyebrowse-mode-map))
    (define-key map (kbd "C-<") 'eyebrowse-prev-window-config)
    (define-key map (kbd "C->") 'eyebrowse-next-window-config)
    (define-key map (kbd "C-'") 'eyebrowse-last-window-config)
    (define-key map (kbd "C-\"") 'eyebrowse-close-window-config)
    (define-key map (kbd "M-w") 'eyebrowse-close-window-config)
    (define-key map (kbd "M-0") 'eyebrowse-switch-to-window-config-0)
    (define-key map (kbd "M-1") 'eyebrowse-switch-to-window-config-1)
    (define-key map (kbd "M-2") 'eyebrowse-switch-to-window-config-2)
    (define-key map (kbd "M-3") 'eyebrowse-switch-to-window-config-3)
    (define-key map (kbd "M-4") 'eyebrowse-switch-to-window-config-4)
    (define-key map (kbd "M-5") 'eyebrowse-switch-to-window-config-5)
    (define-key map (kbd "M-6") 'eyebrowse-switch-to-window-config-6)
    (define-key map (kbd "M-7") 'eyebrowse-switch-to-window-config-7)
    (define-key map (kbd "M-8") 'eyebrowse-switch-to-window-config-8)
    (define-key map (kbd "M-9") 'eyebrowse-switch-to-window-config-9))
  )
#+end_src
*** Olivetti mode
When writing a single file, it can be nice to have a hyperfocus mode.
Olivett is chosen specifically because it doesn't mess with other
frames, which is nice in combination with EyeBrowse.
#+begin_src emacs-lisp
  (use-package olivetti
    :config
    (setq-default olivetti-body-width 100)
    (setq olivetti-mode-on-hook '()))
#+end_src
*** Graphical configuration
**** Fonts
Make sure all-the-icons is installed.
If the fonts are not already installed, install that as well.
#+BEGIN_SRC emacs-lisp
  (defun aorst/font-installed-p (font-name)
    "Check if font with FONT-NAME is available."
    (if (find-font (font-spec :name font-name))
        t
      nil))

  (use-package all-the-icons
    :config
    (when (and (not (aorst/font-installed-p "all-the-icons"))
               (window-system))
      (all-the-icons-install-fonts t)))
#+END_SRC

#+begin_src emacs-lisp
  (use-package emacs
    :init
    (set-face-attribute 'default nil :font "DejaVu Sans Mono-10" )
    (set-frame-font "Dejavu Sans Mono-10" nil t))
#+end_src

**** Themes
Use Doom emacs themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (load-theme 'doom-gruvbox t)
    (setq doom-themes-neotree-file-icons t)
    (doom-themes-neotree-config)
    (doom-themes-org-config))
#+END_SRC

**** Look
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1))
#+end_src

#+begin_src emacs-lisp
  (setq display-time-format "%H:%M")
#+end_src

Make delimiters have matched rainbow colors for easier distinguishing.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

Make identifiers have unique colors in supported modes.
#+begin_src emacs-lisp
  (use-package color-identifiers-mode
    :config
    (add-hook 'after-init-hook 'global-color-identifiers-mode))
#+end_src
**** Cursor tracking
Ways of making sure it is obvious which window is active and where the cursor is.
#+begin_src emacs-lisp
  (use-package beacon
    :config
    (beacon-mode 1))

  (use-package dimmer
    :config
    (dimmer-configure-company-box)
    (dimmer-configure-helm)
    (dimmer-mode t))
#+end_src
** evil-mode - Vim key bindings
Start by unbinding keys that might interfere later.
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-w"))
#+END_SRC

Use Vim key bindings by default. Do note that some of the other
packages might set evil mode keys to their commands.
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :diminish evil-mode
    :diminish undo-tree-mode
    :init
    (setq evil-want-C-u-scroll t)
    (setq evil-search-module 'evil-search)
    (setq evil-want-keybinding nil))

  ;; Enable the use of z-<buttons> for folding
  (use-package hideshow
    :config
    (add-hook 'prog-mode-hook 'hs-minor-mode))
#+END_SRC

Redefine =:q= to only close current window while =:quit= exits emacs
entirely. This is mostly important when working with eyebrowse or
similar tabbing items as =:q= by default will kill emacs entirely if
on last window of current tab.
#+begin_src emacs-lisp
  (evil-ex-define-cmd "q" 'delete-window)
  (evil-ex-define-cmd "quit" 'evil-quit)
#+end_src
**** Add key bindings for Evil in different modes

#+begin_src emacs-lisp
    (use-package evil-org
      :ensure t
      :after org
      :config
      (add-hook 'org-mode-hook 'evil-org-mode)
      (add-hook 'evil-org-mode-hook
                (lambda ()
                  (evil-org-set-key-theme)))
      (require 'evil-org-agenda)
      (evil-org-agenda-set-keys))

    (use-package evil-collection
      :after evil
      :config
      (evil-collection-init))

    (use-package evil-magit
      :after evil
      :config
      (evil-ex-define-cmd "GCommit" 'magit-commit)
      (evil-ex-define-cmd "GAdd" 'magit-stage-file))
#+END_SRC
**** Evil Leader key
Add a leader key to evil, and set its bindings.  Yes, this is the same
as simply adding keybindings for all this but I like the ease of
setting this up.
#+BEGIN_SRC emacs-lisp
  ;; Evil leader has to be loaded before Evil to work in initial buffers.
  (use-package evil-leader)

  (define-key evil-normal-state-map (kbd "C-f") 'helm-find-files)
  (evil-leader/set-leader "<SPC>")
  (evil-leader/set-key
    "w" 'save-buffer
    "o" 'delete-other-windows
    "f" 'helm-find-files
    "g" 'magit-status
    "h" 'evil-ex-nohighlight
    "b" 'helm-buffers-list
    "t" 'vterm-toggle
    "d" 'olivetti-mode)

  (with-eval-after-load 'evil-maps
    (define-key evil-normal-state-map (kbd "C-n") nil)
    (define-key evil-normal-state-map (kbd "C-p") nil))

  (global-evil-leader-mode)
  (evil-mode 1)
#+END_SRC
**** Extra Evil plugins
Add surround, similar to the vim-surround package.
Also define a couple of new surrounds.
#+begin_src emacs-lisp
(use-package evil-surround
:diminish
(evil-surround-mode)
:config
(global-evil-surround-mode 1))
#+end_src

** File management
*** Neotree
Add a file browser system to emacs.
While it may not be used much it can be very handy sometimes.
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :config
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    (define-key evil-normal-state-map [f8] 'neotree-toggle)
    (global-set-key [f8] 'neotree-toggle))
#+END_SRC
*** Magit
[[https://magit.vc/][Magit]], the better interface to git.
#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC
*** Git gutter
#+begin_src emacs-lisp
  (use-package git-gutter
    :diminish git-gutter-mode
    :config
    (global-git-gutter-mode 1))
#+end_src
*** Project management
Use projectile to easily find and search within projects.
#+begin_src emacs-lisp
  (use-package projectile
    :config
    (projectile-mode 1)
    (define-key evil-normal-state-map (kbd "C-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src
*** Persistent undo
Allows for using undo between session. Note that saving history to disk risks leaking information.
#+begin_src emacs-lisp
(global-undo-tree-mode)
(setq undo-tree-auto-save-history t)
(setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
#+end_src
*** Remote editing
#+begin_src emacs-lisp
  (use-package tramp
    :config
    (add-to-list 'tramp-remote-path "/snap/bin"))
#+end_src
** File types and languages
*** Org-mode
Set up the basic settings of org-mode.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure nil
    :config
    (custom-set-faces
     '(org-headline-done
       ((((class color) (min-colors 16))
         (:foreground "light gray")))))

    (setq org-fontify-done-headline t)
    (setq org-todo-keywords
      '((sequence "TODO(t)" "DOING(o)" "|" "DONE(d)")
        (sequence "|" "CANCELED(c)")))
    (setq org-todo-keyword-faces
      '(("TODO" . (:foreground "red" :weight bold))
        ("DOING" . "yellow")
        ("DONE" . (:foreground "green" :weight bold))
        ("CANCELED" . (:foreground "gray" :weight bold))))
    ;; Make single space end sentences.
    (setq sentence-end-double-space nil)
    (add-hook 'org-mode-hook 'org-indent-mode)
    (eval-after-load 'org-indent '(diminish 'org-indent-mode))
    (setq org-hide-emphasis-markers t)
    (setq org-startup-folded nil))

  (require 'org-tempo)
  (setq org-agenda-files (file-expand-wildcards "~/org/*.org"))
#+end_src

Add a search system for org tags and such. As I tend not to use the
date function in Org too much, the default agenda is pretty useless.
Use this system to include any TODO/DOING task and ANY headline with a
tag.
#+BEGIN_SRC emacs-lisp
  (use-package org-ql
    :config
    (setq org-agenda-custom-commands
          '(("cts" "All tags and ToDos"
             ((org-ql-block '(or (todo "TODO")
                                 (todo "DOING")
                                 (tags))
                            ((org-ql-block-header "Agenda"))))))))
#+END_SRC

Then use org-super agenda to filter through the results of the search.
#+BEGIN_SRC emacs-lisp
    (use-package org-super-agenda
      :config
      (setq org-super-agenda-groups
            '((:discard (:tag ("ignore")))
              (:name "TODOs"
                     :todo "TODO"
                     :todo "DOING")
              (:name "Results"
                     :tag "results"
                     :tag "result")
              (:auto-tags t)))
      (define-key org-super-agenda-header-map "k" 'org-agenda-previous-line)
      (define-key org-super-agenda-header-map "j" 'org-agenda-next-line)
      (org-super-agenda-mode 1))

    ;; Bind the key to bind together the org-agenda stuff
    (global-set-key (kbd "C-c a") (lambda () (interactive) (org-agenda nil "cts")))
#+END_SRC

Prettify the way headlines and such look

#+begin_src emacs-lisp
  (use-package org-superstar
    :config
    (setq org-hide-leading-stars nil)
    (setq org-superstar-leading-bullet " ")
    (setq org-superstar-headline-bullets-list '("\u203A"))
    (add-hook 'org-mode-hook 'org-superstar-mode))
#+end_src

**** Org links
Make Org mode open in current window when following links, by default.
Code kinda copied from [[https://stackoverflow.com/questions/17590784/how-to-let-org-mode-open-a-link-like-file-file-org-in-current-window-inste][here]].
#+begin_src emacs-lisp
(defun org-force-open-current-window ()
  (interactive)
  (let ((org-link-frame-setup (quote
                               ((vm . vm-visit-folder)
                                (vm-imap . vm-visit-imap-folder)
                                (gnus . gnus)
                                (file . find-file)
                                (wl . wl)))
                              ))
    (org-open-at-point)))
(define-key org-mode-map (kbd "C-c o") 'org-force-open-current-window)
;; Redefine old behaviour into another mapping
(define-key org-mode-map (kbd "C-c C-o") 'org-open-at-point)
#+end_src

**** Org prettifying
Do not prettify current line.
#+begin_src emacs-lisp
  (defvar my/current-line '(0 . 0)
    "(start . end) of current line in current buffer")
  (make-variable-buffer-local 'my/current-line)

  (defun my/unhide-current-line (limit)
    "Font-lock function"
    (let ((start (max (point) (car my/current-line)))
          (end (min limit (cdr my/current-line))))
      (when (< start end)
        (remove-text-properties start end '(invisible t display "" composition ""))
        (goto-char limit)
        t)))

  (defun my/refontify-on-linemove ()
    "Post-command-hook"
    (let* ((start (line-beginning-position))
           (end (line-beginning-position 2))
           (needs-update (not (equal start (car my/current-line)))))
      (setq my/current-line (cons start end))
      (when needs-update
        (font-lock-fontify-block 2))))

  (defun my/markdown-unhighlight ()
    "Install"
    (font-lock-add-keywords nil '((my/unhide-current-line)) t)
    (add-hook 'post-command-hook #'my/refontify-on-linemove nil t))

  (add-hook 'org-mode-hook #'my/markdown-unhighlight)

  ;; This can be used in markdown down as well.
  ;; markdown-mode is currently not installed and as such is disabled.
  ;;
  ;; (require 'markdown-mode)
  ;; (add-hook 'markdown-mode-hook #'my/markdown-unhighlight)
  ;; (add-hook 'markdown-mode-hook (lambda () (markdown-toggle-markup-hiding 1)))
#+end_src

**** Org-wiki
#+begin_src emacs-lisp
  (load "org-wiki/org-wiki")
  (setq org-wiki-location "~/org")

  (setq org-wiki-template
        (string-trim
  "
  ,#+TITLE: %n
  ,#+DESCRIPTION:
  ,#+KEYWORDS: %n
  ,#+STARTUP:  content
  ,#+DATE: %d

  - [[wiki:index][Index]]

  - Related:

  ,* %n
  "))

  (global-set-key (kbd "C-c n f") 'org-wiki-helm)
  (global-set-key (kbd "C-c n w") 'org-wiki-index)
  (define-key org-mode-map (kbd "C-c n i") 'org-wiki-insert-link)
  (define-key org-mode-map (kbd "C-c n n") 'org-wiki-insert-new)
  (define-key org-mode-map (kbd "C-c n a") 'org-insert-link)
#+end_src

**** Org-transclusion
Add tranclusion ability to org files
#+begin_src emacs-lisp
  (use-package org-transclusion
    :straight (org-transclusion :type git :host github :repo "cwinsnes/org-transclusion")
    :config
    (add-hook 'org-mode-hook 'org-transclusion-mode))
#+end_src

*** Markdown
#+begin_src emacs-lisp
  (setq markdown-fontify-code-blocks-natively t)
#+end_src
*** Python
#+begin_src emacs-lisp
(setq python-shell-interpreter "python3")
#+end_src
*** Rust
Enable rust syntax highlighting and such.
#+begin_src emacs-lisp
  (use-package rust-mode
    :config
    (setq rust-format-on-save t)
    (define-key rust-mode-map (kbd "C-c C-c") 'rust-compile))
#+end_src
** General coding plugins
*** Error checking
Enable error checking for moded that are not covered by Eglot later.
#+begin_src emacs-lisp
  (use-package flymake
    :config
    (define-key evil-normal-state-map (kbd "M-m") 'flymake-goto-next-error)
    (define-key evil-normal-state-map (kbd "M-n") 'flymake-goto-prev-error)
    (add-hook 'emacs-lisp-mode-hook 'flymake-mode nil t))
#+end_src
*** Company mode
Completion engine for several languages
#+BEGIN_SRC emacs-lisp
    (use-package company
      :diminish company-mode
      :config
      (add-to-list 'company-backends 'company-capf)
      (add-hook 'after-init-hook 'global-company-mode)
      (setq company-minimum-prefix-length 1
            company-dabbrev-downcase 0
            company-idle-delay 0.5)
      (company-tng-configure-default))
#+END_SRC
*** Snippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode 1))

  (use-package yasnippet-snippets)
#+end_src

*** Tags
Make tags work better in Emacs and auto use the correct files.
Will fallback to ripgrep if no tags file is found.
#+begin_src emacs-lisp
  (use-package counsel-etags
    :bind (("C-]" . counsel-etags-find-tag-at-point))
    :init
    ;; Don't ask before rereading the TAGS files if they have changed
    (setq tags-revert-without-query t)
    (setq tags-add-tables nil)
    ;; Don't warn when TAGS files are large
    (setq large-file-warning-threshold nil)
    (add-hook 'prog-mode-hook
              (lambda ()
                (add-hook 'after-save-hook
                          'counsel-etags-virtual-update-tags 'append 'local)))
    :config
    (setq counsel-etags-update-interval 60)
    (add-to-list 'counsel-etags-ignore-directories "build"))

  ;; Bind tag finding to normal key in evil mode
  (with-eval-after-load 'evil-maps
    (define-key evil-normal-state-map (kbd "C-]") 'counsel-etags-find-tag-at-point))
#+end_src

*** LSP-mode
Language server protocol. Works with company-mode!

#+begin_src emacs-lisp
  (use-package lsp-mode
    :hook
    (python-mode . lsp-deferred)
    (rust-mode . lsp-deferred)
    :commands
    (lsp lsp-deferred)
    :config
    (setq lsp-completion-provider :capf)
    (setq lsp-idle-delay 0.2)
    (lsp-register-client
     (make-lsp-client :new-connection (lsp-tramp-connection "pyls")
                      :major-modes '(python-mode)
                      :remote? t
                      :server-id 'pyls-remote)))

  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+end_src
