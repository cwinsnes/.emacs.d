* Instructions
This org file dshould be loaded as part of initialization for Emacs 26+.
Use org-babel-load-file to load the file.

Essentially, the file should be loaded from your init.el using
#+BEGIN_EXAMPLE
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(package-initialize)

(package-installed-p 'use-package)
(package-refresh-contents)
(package-install 'use-package)

(org-babel-load-file (expand-file-name "~/.emacs.d/emacsinit.org"))
#+END_EXAMPLE

* Init
** use-package configuration
We are going to be using use-package as a package manager and
package configuration system. This has to be done first in the
file!
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'use-package)
    (setq use-package-always-ensure t))
#+END_SRC

Add ability to diminish minor modes from list.
Needs to be done here because it is used by use-package in configurations.
#+BEGIN_SRC emacs-lisp
  (use-package diminish)
#+END_SRC

** General emacs settings and plugins
*** Basic settings
#+BEGIN_SRC emacs-lisp
  ;; Allow for using just y or n instead of writing yes/no.
  (fset 'yes-or-no-p 'y-or-n-p)
  ;; Disable that annoying bell
  (setq ring-bell-function 'ignore)
  ;; Show the time
  (display-time-mode 1)
  (blink-cursor-mode -1)
  ;; Enable emacs server
  (server-start)

  ;; Enable both line and column number in mode-line.
  (line-number-mode t)
  (column-number-mode t)

  ;; Remove a bunch of visual noise from emacs
  (setq inhibit-startup-screen t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

Remove trailing whitespace upon save
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :ensure nil
    :hook (before-save . whitespace-cleanup))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :ensure nil
    :config
    (global-auto-revert-mode)
    (diminish 'auto-revert-mode))
#+END_SRC
*** Ivy
Enables completion in the mini buffers
#+begin_src emacs-lisp
  (use-package ivy
    :diminish ivy-mode
    :config
    (ivy-mode 1))


  (define-key ivy-minibuffer-map (kbd "C-w") 'backward-kill-word)
#+end_src
*** Eye-browse
Add a tab-like configuration instead of having to use multiple frames
for different groups of buffers.
#+begin_src emacs-lisp
  (use-package eyebrowse
  :diminish eyebrowse-mode
  :after evil
  :config
  (eyebrowse-mode t)
  ; Most of these are supposed to happen automatically but evil is not
  ; detected for some reason.
  (let ((map eyebrowse-mode-map))
    (define-key map (kbd "C-<") 'eyebrowse-prev-window-config)
    (define-key map (kbd "C->") 'eyebrowse-next-window-config)
    (define-key map (kbd "C-'") 'eyebrowse-last-window-config)
    (define-key map (kbd "C-\"") 'eyebrowse-close-window-config)
    (define-key map (kbd "M-w") 'eyebrowse-close-window-config)
    (define-key map (kbd "M-0") 'eyebrowse-switch-to-window-config-0)
    (define-key map (kbd "M-1") 'eyebrowse-switch-to-window-config-1)
    (define-key map (kbd "M-2") 'eyebrowse-switch-to-window-config-2)
    (define-key map (kbd "M-3") 'eyebrowse-switch-to-window-config-3)
    (define-key map (kbd "M-4") 'eyebrowse-switch-to-window-config-4)
    (define-key map (kbd "M-5") 'eyebrowse-switch-to-window-config-5)
    (define-key map (kbd "M-6") 'eyebrowse-switch-to-window-config-6)
    (define-key map (kbd "M-7") 'eyebrowse-switch-to-window-config-7)
    (define-key map (kbd "M-8") 'eyebrowse-switch-to-window-config-8)
    (define-key map (kbd "M-9") 'eyebrowse-switch-to-window-config-9))
  )
#+end_src
*** Graphical configuration
Make sure all-the-icons is installed.
If the fonts are not already installed, install that as well.
#+BEGIN_SRC emacs-lisp
  (defun aorst/font-installed-p (font-name)
    "Check if font with FONT-NAME is available."
    (if (find-font (font-spec :name font-name))
        t
      nil))

  (use-package all-the-icons
    :config
    (when (and (not (aorst/font-installed-p "all-the-icons"))
               (window-system))
      (all-the-icons-install-fonts t)))
#+END_SRC

Use Doom emacs themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (load-theme 'doom-gruvbox t)
    (setq doom-themes-neotree-file-icons t)
    (doom-themes-neotree-config)

    (doom-themes-org-config))
#+END_SRC

#+begin_src emacs-lisp
  (use-package ivy-posframe
    :diminish ivy-posframe-mode
    :config
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-point)))
    (ivy-posframe-mode 1))
#+end_src
** LibVTerm
Adding a proper terminal into emacs. This package requires
=libtool-bin= and =cmake > 3.11= to work properly.

If =M-x vterm= is run, libvterm will be installed automatically using
the required tools.
#+begin_src emacs-lisp
(use-package vterm)
#+end_src

Also add a toggle ability, to quickly switch to and from vterm.
#+begin_src emacs-lisp
(use-package vterm-toggle)
#+end_src
** evil-mode - Vim key bindings
Start by unbinding keys that might interfere later.
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-w"))
#+END_SRC

Use Vim key bindings by default. Do note that some of the other
packages might set evil mode keys to their commands.
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :diminish evil-mode
    :diminish undo-tree-mode
    :init
    (setq evil-want-C-u-scroll t)
    (setq evil-search-module 'evil-search)
    (setq evil-want-keybinding nil))
#+END_SRC

Redefine =:q= to only close current window while =:quit= exits emacs
entirely. This is mostly important when working with eyebrowse or
similar tabbing items as =:q= by default will kill emacs entirely if
on last window of current tab.
#+begin_src emacs-lisp
  (evil-ex-define-cmd "q" 'delete-window)
  (evil-ex-define-cmd "quit" 'evil-quit)
#+end_src

#+begin_src emacs-lisp
  (use-package evil-org
    :after evil)

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-magit
    :after evil)
#+END_SRC

Add a leader key to evil, and set its bindings.
#+BEGIN_SRC emacs-lisp
  ;; Evil leader has to be loaded before Evil to work in initial buffers.
  (use-package evil-leader)

  (define-key evil-normal-state-map (kbd "C-f") 'find-file)
  (evil-leader/set-leader "<SPC>")
  (evil-leader/set-key
    "w" 'save-buffer
    "o" 'delete-other-windows
    "f" 'find-file
    "g" 'magit-status
    "h" 'evil-ex-nohighlight
    "b" 'ivy-switch-buffer
    "t" 'vterm-toggle)

  (with-eval-after-load 'evil-maps
    (define-key evil-normal-state-map (kbd "C-n") nil)
    (define-key evil-normal-state-map (kbd "C-p") nil))

  (global-evil-leader-mode)
  (evil-mode 1)
#+END_SRC

** File management
*** Neotree
Add a file browser system to emacs.
While it may not be used much it can be very handy sometimes.
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :config
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    (define-key evil-normal-state-map [f8] 'neotree-toggle)
    (global-set-key [f8] 'neotree-toggle))
#+END_SRC
*** Magit
[[https://magit.vc/][Magit]], the better interface to git.
#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC
*** Git gutter
#+begin_src emacs-lisp
  (use-package git-gutter
    :diminish git-gutter-mode
    :config
    (global-git-gutter-mode 1))
#+end_src
** File types and languages
*** Org-mode
Make sure that org mode starts in indent mode by default.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure nil
    :config
    (add-hook 'org-mode-hook 'org-indent-mode)
    (eval-after-load 'org-indent '(diminish 'org-indent-mode)))

  (require 'org-tempo)
#+END_SRC

Org-roam allows for backlinking notes.
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :diminish org-roam-mode
    :hook
    (after-init . org-roam-mode)
    :custom
    (org-roam-directory "~/org/")
    :bind (:map org-roam-mode-map
                (("C-c n l" . org-roam)
                 ("C-c n f" . org-roam-find-file)
                 ("C-c n g" . org-roam-graph-show))
                :map org-mode-map
                (("C-c n i" . org-roam-insert))
                (("C-c n I" . org-roam-insert-immediate))))

  (setq org-roam-capture-templates
        '(("d" "default" plain (function org-roam--capture-get-point)
          "%?"
          :file-name "%<%Y%m%d>-${slug}"
          :head "#+title: ${title}\n#+roam_alias: ${title}\n#+roam_key: cite:${title}\n"
          :unnarrowed t)))
#+END_SRC
*** Markdown
#+begin_src emacs-lisp
  (setq markdown-fontify-code-blocks-natively t)
#+end_src
** General coding plugins
*** Company mode
Completion engine for several languages
#+BEGIN_SRC emacs-lisp
    (use-package company
      :diminish company-mode
      :config
      (add-to-list 'company-backends 'company-capf)
      (add-hook 'after-init-hook 'global-company-mode)
      (setq company-minimum-prefix-length 1
            company-dabbrev-downcase 0
            company-idle-delay 0)
      (company-tng-configure-default))
#+END_SRC
*** Tags
A solution for jumping to definitions that is slightly less powerful
than a ctags/etags file but it works most of the time pretty well.
See [[https://github.com/jacktasia/dumb-jump][the webpage]] for supported languages.

Should have ag/rg installed for this to be fast enough but will work with standard grep.
#+begin_src emacs-lisp
  (use-package dumb-jump
    :config
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+end_src

*** Error checking
#+begin_src emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode)
    :config
    (define-key evil-normal-state-map (kbd "M-m") 'flycheck-next-error)
    (define-key evil-normal-state-map (kbd "M-n") 'flycheck-previous-error))
#+end_src
*** LSP Mode
Language server protocol. Works with company-mode!
Currently disabled due to performance issues
#+BEGIN_SRC emacs-lisp
;;    (use-package lsp-mode
;;      :diminish lsp-mode
;;      :commands (lsp lsp-deferred))
;;      :hook (prog-mode . lsp))
#+END_SRC
